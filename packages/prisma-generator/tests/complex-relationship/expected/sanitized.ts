import { DataType, model, SchemaType, type Simplify } from '@genseki/react'

export const TableAModel = model(
  {
    columns: {
      id: {
        schema: SchemaType.COLUMN,
        name: 'id',
        isId: true,
        isList: false,
        isUnique: false,
        isReadOnly: false,
        isRequired: true,
        hasDefaultValue: false,
        dataType: DataType.STRING,
      },
      name: {
        schema: SchemaType.COLUMN,
        name: 'name',
        isId: false,
        isList: false,
        isUnique: false,
        isReadOnly: false,
        isRequired: true,
        hasDefaultValue: false,
        dataType: DataType.STRING,
      },
      description: {
        schema: SchemaType.COLUMN,
        name: 'description',
        isId: false,
        isList: false,
        isUnique: false,
        isReadOnly: false,
        isRequired: false,
        hasDefaultValue: false,
        dataType: DataType.STRING,
      },
      createdAt: {
        schema: SchemaType.COLUMN,
        name: 'createdAt',
        isId: false,
        isList: false,
        isUnique: false,
        isReadOnly: false,
        isRequired: true,
        hasDefaultValue: true,
        dataType: DataType.DATETIME,
      },
      updatedAt: {
        schema: SchemaType.COLUMN,
        name: 'updatedAt',
        isId: false,
        isList: false,
        isUnique: false,
        isReadOnly: false,
        isRequired: true,
        hasDefaultValue: false,
        dataType: DataType.DATETIME,
      },
    },
    relations: {
      tableB: {
        schema: SchemaType.RELATION,
        name: 'tableB',
        isId: false,
        isList: true,
        isUnique: false,
        isReadOnly: false,
        isRequired: true,
        hasDefaultValue: false,
        relationName: 'TableAToTableB',
        referencedModel: 'TableB',
        relationToFields: [],
        relationFromFields: [],
        relationDataTypes: [],
      },
      tableC: {
        schema: SchemaType.RELATION,
        name: 'tableC',
        isId: false,
        isList: true,
        isUnique: false,
        isReadOnly: false,
        isRequired: true,
        hasDefaultValue: false,
        relationName: 'TableAToTableC',
        referencedModel: 'TableC',
        relationToFields: [],
        relationFromFields: [],
        relationDataTypes: [],
      },
    },
    primaryFields: ['id'],
    uniqueFields: [['id']],
  },
  {
    name: 'TableAModel',
    dbModelName: 'TableA',
    prismaModelName: 'TableA',
  }
)

export type TableAModel = Simplify<typeof TableAModel>

export const TableBModel = model(
  {
    columns: {
      id: {
        schema: SchemaType.COLUMN,
        name: 'id',
        isId: true,
        isList: false,
        isUnique: false,
        isReadOnly: false,
        isRequired: true,
        hasDefaultValue: false,
        dataType: DataType.STRING,
      },
      name: {
        schema: SchemaType.COLUMN,
        name: 'name',
        isId: false,
        isList: false,
        isUnique: false,
        isReadOnly: false,
        isRequired: true,
        hasDefaultValue: false,
        dataType: DataType.STRING,
      },
      description: {
        schema: SchemaType.COLUMN,
        name: 'description',
        isId: false,
        isList: false,
        isUnique: false,
        isReadOnly: false,
        isRequired: false,
        hasDefaultValue: false,
        dataType: DataType.STRING,
      },
      createdAt: {
        schema: SchemaType.COLUMN,
        name: 'createdAt',
        isId: false,
        isList: false,
        isUnique: false,
        isReadOnly: false,
        isRequired: true,
        hasDefaultValue: true,
        dataType: DataType.DATETIME,
      },
      updatedAt: {
        schema: SchemaType.COLUMN,
        name: 'updatedAt',
        isId: false,
        isList: false,
        isUnique: false,
        isReadOnly: false,
        isRequired: true,
        hasDefaultValue: false,
        dataType: DataType.DATETIME,
      },
      tableCId: {
        schema: SchemaType.COLUMN,
        name: 'tableCId',
        isId: false,
        isList: false,
        isUnique: false,
        isReadOnly: true,
        isRequired: true,
        hasDefaultValue: false,
        dataType: DataType.STRING,
      },
    },
    relations: {
      tableA: {
        schema: SchemaType.RELATION,
        name: 'tableA',
        isId: false,
        isList: true,
        isUnique: false,
        isReadOnly: false,
        isRequired: true,
        hasDefaultValue: false,
        relationName: 'TableAToTableB',
        referencedModel: 'TableA',
        relationToFields: [],
        relationFromFields: [],
        relationDataTypes: [],
      },
      tableC: {
        schema: SchemaType.RELATION,
        name: 'tableC',
        isId: false,
        isList: false,
        isUnique: false,
        isReadOnly: false,
        isRequired: true,
        hasDefaultValue: false,
        relationName: 'TableBToTableC',
        referencedModel: 'TableC',
        relationToFields: ['id'],
        relationFromFields: ['tableCId'],
        relationDataTypes: [DataType.STRING],
      },
    },
    primaryFields: ['id'],
    uniqueFields: [['id']],
  },
  {
    name: 'TableBModel',
    dbModelName: 'TableB',
    prismaModelName: 'TableB',
  }
)

export type TableBModel = Simplify<typeof TableBModel>

export const TableCModel = model(
  {
    columns: {
      id: {
        schema: SchemaType.COLUMN,
        name: 'id',
        isId: true,
        isList: false,
        isUnique: false,
        isReadOnly: false,
        isRequired: true,
        hasDefaultValue: false,
        dataType: DataType.STRING,
      },
      name: {
        schema: SchemaType.COLUMN,
        name: 'name',
        isId: false,
        isList: false,
        isUnique: false,
        isReadOnly: false,
        isRequired: true,
        hasDefaultValue: false,
        dataType: DataType.STRING,
      },
      description: {
        schema: SchemaType.COLUMN,
        name: 'description',
        isId: false,
        isList: false,
        isUnique: false,
        isReadOnly: false,
        isRequired: false,
        hasDefaultValue: false,
        dataType: DataType.STRING,
      },
      createdAt: {
        schema: SchemaType.COLUMN,
        name: 'createdAt',
        isId: false,
        isList: false,
        isUnique: false,
        isReadOnly: false,
        isRequired: true,
        hasDefaultValue: true,
        dataType: DataType.DATETIME,
      },
      updatedAt: {
        schema: SchemaType.COLUMN,
        name: 'updatedAt',
        isId: false,
        isList: false,
        isUnique: false,
        isReadOnly: false,
        isRequired: true,
        hasDefaultValue: false,
        dataType: DataType.DATETIME,
      },
    },
    relations: {
      tableA: {
        schema: SchemaType.RELATION,
        name: 'tableA',
        isId: false,
        isList: true,
        isUnique: false,
        isReadOnly: false,
        isRequired: true,
        hasDefaultValue: false,
        relationName: 'TableAToTableC',
        referencedModel: 'TableA',
        relationToFields: [],
        relationFromFields: [],
        relationDataTypes: [],
      },
      tableB: {
        schema: SchemaType.RELATION,
        name: 'tableB',
        isId: false,
        isList: true,
        isUnique: false,
        isReadOnly: false,
        isRequired: true,
        hasDefaultValue: false,
        relationName: 'TableBToTableC',
        referencedModel: 'TableB',
        relationToFields: [],
        relationFromFields: [],
        relationDataTypes: [],
      },
    },
    primaryFields: ['id'],
    uniqueFields: [['id']],
  },
  {
    name: 'TableCModel',
    dbModelName: 'TableC',
    prismaModelName: 'TableC',
  }
)

export type TableCModel = Simplify<typeof TableCModel>
