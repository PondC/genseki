import { DataType, model, SchemaType, type Simplify } from '@genseki/prisma-generator'

export const DataModel = model(
  {
    id: {
      schema: SchemaType.COLUMN,
      name: 'id',
      isId: true,
      isList: false,
      isUnique: false,
      isReadOnly: false,
      isRequired: true,
      hasDefaultValue: false,
      dataType: DataType.INT,
    },
    stringField: {
      schema: SchemaType.COLUMN,
      name: 'stringField',
      isId: false,
      isList: false,
      isUnique: false,
      isReadOnly: false,
      isRequired: true,
      hasDefaultValue: false,
      dataType: DataType.STRING,
    },
    booleanField: {
      schema: SchemaType.COLUMN,
      name: 'booleanField',
      isId: false,
      isList: false,
      isUnique: false,
      isReadOnly: false,
      isRequired: true,
      hasDefaultValue: false,
      dataType: DataType.BOOLEAN,
    },
    intField: {
      schema: SchemaType.COLUMN,
      name: 'intField',
      isId: false,
      isList: false,
      isUnique: false,
      isReadOnly: false,
      isRequired: true,
      hasDefaultValue: false,
      dataType: DataType.INT,
    },
    bigIntField: {
      schema: SchemaType.COLUMN,
      name: 'bigIntField',
      isId: false,
      isList: false,
      isUnique: false,
      isReadOnly: false,
      isRequired: true,
      hasDefaultValue: false,
      dataType: DataType.BIGINT,
    },
    floatField: {
      schema: SchemaType.COLUMN,
      name: 'floatField',
      isId: false,
      isList: false,
      isUnique: false,
      isReadOnly: false,
      isRequired: true,
      hasDefaultValue: false,
      dataType: DataType.FLOAT,
    },
    decimalField: {
      schema: SchemaType.COLUMN,
      name: 'decimalField',
      isId: false,
      isList: false,
      isUnique: false,
      isReadOnly: false,
      isRequired: true,
      hasDefaultValue: false,
      dataType: DataType.DECIMAL,
    },
    dateField: {
      schema: SchemaType.COLUMN,
      name: 'dateField',
      isId: false,
      isList: false,
      isUnique: false,
      isReadOnly: false,
      isRequired: true,
      hasDefaultValue: false,
      dataType: DataType.DATETIME,
    },
    jsonField: {
      schema: SchemaType.COLUMN,
      name: 'jsonField',
      isId: false,
      isList: false,
      isUnique: false,
      isReadOnly: false,
      isRequired: true,
      hasDefaultValue: false,
      dataType: DataType.JSON,
    },
    bytesField: {
      schema: SchemaType.COLUMN,
      name: 'bytesField',
      isId: false,
      isList: false,
      isUnique: false,
      isReadOnly: false,
      isRequired: true,
      hasDefaultValue: false,
      dataType: DataType.BYTES,
    },
    enumField: {
      schema: SchemaType.COLUMN,
      name: 'enumField',
      isId: false,
      isList: false,
      isUnique: false,
      isReadOnly: false,
      isRequired: true,
      hasDefaultValue: false,
      dataType: DataType.STRING,
      enumValues: ['Apple', 'Banana', 'Orange', 'Pear'],
    },
    relationId: {
      schema: SchemaType.COLUMN,
      name: 'relationId',
      isId: false,
      isList: false,
      isUnique: false,
      isReadOnly: true,
      isRequired: true,
      hasDefaultValue: false,
      dataType: DataType.INT,
    },
    relationField: {
      schema: SchemaType.RELATION,
      name: 'relationField',
      isId: false,
      isList: false,
      isUnique: false,
      isReadOnly: false,
      isRequired: true,
      hasDefaultValue: false,
      relationName: 'DataToRelationA',
      referencedModel: 'RelationA',
      relationToFields: ['id'],
      relationFromFields: ['relationId'],
    },
    optionalStringField: {
      schema: SchemaType.COLUMN,
      name: 'optionalStringField',
      isId: false,
      isList: false,
      isUnique: false,
      isReadOnly: false,
      isRequired: false,
      hasDefaultValue: false,
      dataType: DataType.STRING,
    },
    optionalBooleanField: {
      schema: SchemaType.COLUMN,
      name: 'optionalBooleanField',
      isId: false,
      isList: false,
      isUnique: false,
      isReadOnly: false,
      isRequired: false,
      hasDefaultValue: false,
      dataType: DataType.BOOLEAN,
    },
    optionalIntField: {
      schema: SchemaType.COLUMN,
      name: 'optionalIntField',
      isId: false,
      isList: false,
      isUnique: false,
      isReadOnly: false,
      isRequired: false,
      hasDefaultValue: false,
      dataType: DataType.INT,
    },
    optionalBigIntField: {
      schema: SchemaType.COLUMN,
      name: 'optionalBigIntField',
      isId: false,
      isList: false,
      isUnique: false,
      isReadOnly: false,
      isRequired: false,
      hasDefaultValue: false,
      dataType: DataType.BIGINT,
    },
    optionalFloatField: {
      schema: SchemaType.COLUMN,
      name: 'optionalFloatField',
      isId: false,
      isList: false,
      isUnique: false,
      isReadOnly: false,
      isRequired: false,
      hasDefaultValue: false,
      dataType: DataType.FLOAT,
    },
    optionalDecimalField: {
      schema: SchemaType.COLUMN,
      name: 'optionalDecimalField',
      isId: false,
      isList: false,
      isUnique: false,
      isReadOnly: false,
      isRequired: false,
      hasDefaultValue: false,
      dataType: DataType.DECIMAL,
    },
    optionalDateField: {
      schema: SchemaType.COLUMN,
      name: 'optionalDateField',
      isId: false,
      isList: false,
      isUnique: false,
      isReadOnly: false,
      isRequired: false,
      hasDefaultValue: false,
      dataType: DataType.DATETIME,
    },
    optionalJsonField: {
      schema: SchemaType.COLUMN,
      name: 'optionalJsonField',
      isId: false,
      isList: false,
      isUnique: false,
      isReadOnly: false,
      isRequired: false,
      hasDefaultValue: false,
      dataType: DataType.JSON,
    },
    optionalBytesField: {
      schema: SchemaType.COLUMN,
      name: 'optionalBytesField',
      isId: false,
      isList: false,
      isUnique: false,
      isReadOnly: false,
      isRequired: false,
      hasDefaultValue: false,
      dataType: DataType.BYTES,
    },
    optionalEnumField: {
      schema: SchemaType.COLUMN,
      name: 'optionalEnumField',
      isId: false,
      isList: false,
      isUnique: false,
      isReadOnly: false,
      isRequired: false,
      hasDefaultValue: false,
      dataType: DataType.STRING,
      enumValues: ['Apple', 'Banana', 'Orange', 'Pear'],
    },
    optionalRelationField: {
      schema: SchemaType.RELATION,
      name: 'optionalRelationField',
      isId: false,
      isList: false,
      isUnique: false,
      isReadOnly: false,
      isRequired: false,
      hasDefaultValue: false,
      relationName: 'DataToRelationB',
      referencedModel: 'RelationB',
      relationToFields: [],
      relationFromFields: [],
    },
    stringArrayField: {
      schema: SchemaType.COLUMN,
      name: 'stringArrayField',
      isId: false,
      isList: true,
      isUnique: false,
      isReadOnly: false,
      isRequired: true,
      hasDefaultValue: false,
      dataType: DataType.STRING,
    },
    booleanArrayField: {
      schema: SchemaType.COLUMN,
      name: 'booleanArrayField',
      isId: false,
      isList: true,
      isUnique: false,
      isReadOnly: false,
      isRequired: true,
      hasDefaultValue: false,
      dataType: DataType.BOOLEAN,
    },
    intArrayField: {
      schema: SchemaType.COLUMN,
      name: 'intArrayField',
      isId: false,
      isList: true,
      isUnique: false,
      isReadOnly: false,
      isRequired: true,
      hasDefaultValue: false,
      dataType: DataType.INT,
    },
    bigIntArrayField: {
      schema: SchemaType.COLUMN,
      name: 'bigIntArrayField',
      isId: false,
      isList: true,
      isUnique: false,
      isReadOnly: false,
      isRequired: true,
      hasDefaultValue: false,
      dataType: DataType.BIGINT,
    },
    floatArrayField: {
      schema: SchemaType.COLUMN,
      name: 'floatArrayField',
      isId: false,
      isList: true,
      isUnique: false,
      isReadOnly: false,
      isRequired: true,
      hasDefaultValue: false,
      dataType: DataType.FLOAT,
    },
    decimalArrayField: {
      schema: SchemaType.COLUMN,
      name: 'decimalArrayField',
      isId: false,
      isList: true,
      isUnique: false,
      isReadOnly: false,
      isRequired: true,
      hasDefaultValue: false,
      dataType: DataType.DECIMAL,
    },
    dateArrayField: {
      schema: SchemaType.COLUMN,
      name: 'dateArrayField',
      isId: false,
      isList: true,
      isUnique: false,
      isReadOnly: false,
      isRequired: true,
      hasDefaultValue: false,
      dataType: DataType.DATETIME,
    },
    jsonArrayField: {
      schema: SchemaType.COLUMN,
      name: 'jsonArrayField',
      isId: false,
      isList: true,
      isUnique: false,
      isReadOnly: false,
      isRequired: true,
      hasDefaultValue: false,
      dataType: DataType.JSON,
    },
    bytesArrayField: {
      schema: SchemaType.COLUMN,
      name: 'bytesArrayField',
      isId: false,
      isList: true,
      isUnique: false,
      isReadOnly: false,
      isRequired: true,
      hasDefaultValue: false,
      dataType: DataType.BYTES,
    },
    enumArrayField: {
      schema: SchemaType.COLUMN,
      name: 'enumArrayField',
      isId: false,
      isList: true,
      isUnique: false,
      isReadOnly: false,
      isRequired: true,
      hasDefaultValue: false,
      dataType: DataType.STRING,
      enumValues: ['Apple', 'Banana', 'Orange', 'Pear'],
    },
    relationArrayField: {
      schema: SchemaType.RELATION,
      name: 'relationArrayField',
      isId: false,
      isList: true,
      isUnique: false,
      isReadOnly: false,
      isRequired: true,
      hasDefaultValue: false,
      relationName: 'DataToRelationC',
      referencedModel: 'RelationC',
      relationToFields: [],
      relationFromFields: [],
    },
  },
  {
    name: 'DataModel',
    dbModelName: 'Data',
    prismaModelName: 'Data',
    primaryFields: ['id'],
    uniqueFields: [['id']],
  }
)

export type DataModel = Simplify<typeof DataModel>

export const RelationAModel = model(
  {
    id: {
      schema: SchemaType.COLUMN,
      name: 'id',
      isId: true,
      isList: false,
      isUnique: false,
      isReadOnly: false,
      isRequired: true,
      hasDefaultValue: false,
      dataType: DataType.INT,
    },
    fieldA: {
      schema: SchemaType.COLUMN,
      name: 'fieldA',
      isId: false,
      isList: false,
      isUnique: false,
      isReadOnly: false,
      isRequired: true,
      hasDefaultValue: false,
      dataType: DataType.STRING,
    },
    data: {
      schema: SchemaType.RELATION,
      name: 'data',
      isId: false,
      isList: true,
      isUnique: false,
      isReadOnly: false,
      isRequired: true,
      hasDefaultValue: false,
      relationName: 'DataToRelationA',
      referencedModel: 'Data',
      relationToFields: [],
      relationFromFields: [],
    },
  },
  {
    name: 'RelationAModel',
    dbModelName: 'RelationA',
    prismaModelName: 'RelationA',
    primaryFields: ['id'],
    uniqueFields: [['id']],
  }
)

export type RelationAModel = Simplify<typeof RelationAModel>

export const RelationBModel = model(
  {
    id: {
      schema: SchemaType.COLUMN,
      name: 'id',
      isId: true,
      isList: false,
      isUnique: false,
      isReadOnly: false,
      isRequired: true,
      hasDefaultValue: false,
      dataType: DataType.INT,
    },
    fieldB: {
      schema: SchemaType.COLUMN,
      name: 'fieldB',
      isId: false,
      isList: false,
      isUnique: false,
      isReadOnly: false,
      isRequired: true,
      hasDefaultValue: false,
      dataType: DataType.STRING,
    },
    dataId: {
      schema: SchemaType.COLUMN,
      name: 'dataId',
      isId: false,
      isList: false,
      isUnique: true,
      isReadOnly: true,
      isRequired: true,
      hasDefaultValue: false,
      dataType: DataType.INT,
    },
    data: {
      schema: SchemaType.RELATION,
      name: 'data',
      isId: false,
      isList: false,
      isUnique: false,
      isReadOnly: false,
      isRequired: true,
      hasDefaultValue: false,
      relationName: 'DataToRelationB',
      referencedModel: 'Data',
      relationToFields: ['id'],
      relationFromFields: ['dataId'],
    },
  },
  {
    name: 'RelationBModel',
    dbModelName: 'RelationB',
    prismaModelName: 'RelationB',
    primaryFields: ['id'],
    uniqueFields: [['id'], ['dataId']],
  }
)

export type RelationBModel = Simplify<typeof RelationBModel>

export const RelationCModel = model(
  {
    id: {
      schema: SchemaType.COLUMN,
      name: 'id',
      isId: true,
      isList: false,
      isUnique: false,
      isReadOnly: false,
      isRequired: true,
      hasDefaultValue: false,
      dataType: DataType.INT,
    },
    fieldC: {
      schema: SchemaType.COLUMN,
      name: 'fieldC',
      isId: false,
      isList: false,
      isUnique: false,
      isReadOnly: false,
      isRequired: true,
      hasDefaultValue: false,
      dataType: DataType.STRING,
    },
    dataId: {
      schema: SchemaType.COLUMN,
      name: 'dataId',
      isId: false,
      isList: false,
      isUnique: false,
      isReadOnly: true,
      isRequired: true,
      hasDefaultValue: false,
      dataType: DataType.INT,
    },
    data: {
      schema: SchemaType.RELATION,
      name: 'data',
      isId: false,
      isList: false,
      isUnique: false,
      isReadOnly: false,
      isRequired: true,
      hasDefaultValue: false,
      relationName: 'DataToRelationC',
      referencedModel: 'Data',
      relationToFields: ['id'],
      relationFromFields: ['dataId'],
    },
  },
  {
    name: 'RelationCModel',
    dbModelName: 'RelationC',
    prismaModelName: 'RelationC',
    primaryFields: ['id'],
    uniqueFields: [['id']],
  }
)

export type RelationCModel = Simplify<typeof RelationCModel>
